from cuckoo.common.abstracts import Processing

from elftools.common.exceptions import ELFError
from elftools.elf.constants import E_FLAGS
from elftools.elf.descriptions import (
    describe_ei_class, describe_ei_data, describe_ei_version,
    describe_ei_osabi, describe_e_type, describe_e_machine,
    describe_e_version_numeric, describe_p_type, describe_p_flags,
    describe_sh_type, describe_dyn_tag, describe_symbol_type,
    describe_symbol_bind, describe_note, describe_reloc_type
)
from elftools.elf.dynamic import DynamicSection
from elftools.elf.elffile import ELFFile
from elftools.elf.enums import ENUM_D_TAG
from elftools.elf.relocation import RelocationSection
from elftools.elf.sections import SymbolTableSection
from elftools.elf.segments import NoteSegment

from capstone import *

import subprocess

class Objdump(Processing):
    def run(self):
        try:
            self.key = "objdump"
            self.elf = ELFFile(open(self.file_path, "rb"))
            result = {}
            #result["opcodes_elftools"] = self.get_opcodes_elftools()
            result["opcodes_objdump"] = self.get_opcodes_objdump()
        except Exception as e:
            print(e)
            return {}
        return result

    def get_opcodes_elftools(self):
        try:
            code = self.elf.get_section_by_name('.text')
            ops = code.data()
            addr = code['sh_addr']
            md = Cs(CS_ARCH_X86, CS_MODE_64)
            disas = md.disasm(ops, addr)
            disas_result = {}
            for i in disas:
                disas_result[str(i.address)] = "{}\t{}".format(i.mnemonic, i.op_str)
        except Exception as e:
            print("Error in elftools: ", e)
            return {}
        return disas_result
   
    def get_opcodes_objdump(self):
        try:
            disas_result = {}
            out = subprocess.check_output(['objdump', '--disassemble', '--section=.text', self.file_path])
            out = out.splitlines()
            contador = 0
            for line in out:
                splitline = line.split('\t')
                if(len(splitline) <= 2):
                    continue
                code = splitline[2]
                codesplit = code.split(' ')
                disas_result[str(contador)] = codesplit[0]
                contador += 1
        except Exception as e:
            print("Error in elftools: ", e)
            return {}
        return disas_result
   
