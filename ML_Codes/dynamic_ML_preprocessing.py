#from pandas import DataFrame
import pandas as pd
import numpy as np
import ast
import json

def create_syscall_types(syscall_json):
    syscall_dict = {}
    for syscall in syscall_json.items():
        syscall_name = syscall[1][1]
        syscall_file = str(syscall[1][3]).split('/')[0]
        
        if(syscall_name == 'mmap'):
            syscall_name = 'mmap2'
        
        syscall_dict[syscall_name] = syscall_file

    #adicoes manuais a partir de https://man7.org/linux/man-pages/
    manual_adds = {'getrandom':'security','statx':'fs', 'memfd_create':'fs', 'sigaction':'kernel', 'seccomp':'security', 'pwrite':'fs', 'bpf':'net', 'ni_syscall':'kernel'}
    for syscall_name in manual_adds:
        syscall_dict[syscall_name] = manual_adds[syscall_name]

    return syscall_dict

def healper_syscall_string(df):
    syscalls_str = []
    types_count = []
    number_processes = []

    for sample_call_list_str in df['calls_list']:
        sample_allcalls_list = []
        sample_types_count = np.zeros(8)
        sample_call_list = ast.literal_eval(sample_call_list_str)
        sample_number_processes = len(sample_call_list)
        for process_call_list in sample_call_list:
            for syscall_name in process_call_list:
                if(syscall_name in translate_name_dict):
                    syscall_name = translate_name_dict[syscall_name]
                syscall_type = syscall_types_dict.get(syscall_name)
                sample_allcalls_list.append(syscall_name)
                sample_types_count[types_enumerate[syscall_type]] += 1
        sample_allcalls_str = " ".join(sample_allcalls_list)
        syscalls_str.append(sample_allcalls_str)
        if(not np.any(sample_types_count)):
            types_count.append(sample_types_count)
        else:
            types_count.append(sample_types_count/sum(sample_types_count))
        number_processes.append(sample_number_processes)

    df['syscalls_str'] = [x for x in syscalls_str]
    for type_name in types_enumerate:
        df['type.'+type_name] = [x[types_enumerate[type_name]] for x in types_count]
    df['number_processes'] = [x for x in number_processes]
    return df

syscall_json_file = open('/media/cuckoohost/HD/OneDrive/AndreViana/Documents/0 USP/2023.1/TCC/Coisas/syscall_TABELLA_64.json')
syscall_json = json.load(syscall_json_file)
syscall_types_dict = create_syscall_types(syscall_json)

csv_training_path = '/media/cuckoohost/HD/OneDrive/AndreViana/Documents/0 USP/2023.1/TCC/Codigos/csvs/dynamic/dynamic{}.csv'
training_samples_df_list = []

csv_test_path = '/media/cuckoohost/HD/OneDrive/AndreViana/Documents/0 USP/2023.1/TCC/Codigos/csvs/dynamic/dynamic{}_test.csv'
test_samples_df_list = []

for i in range(6):
		this_df = pd.read_csv(csv_training_path.format(i))
		training_samples_df_list.append(this_df)

for i in range(6):
        this_df = pd.read_csv(csv_test_path.format(i))
        test_samples_df_list.append(this_df)

#combinando em um DF
df_train = pd.concat(training_samples_df_list, ignore_index=True)
df_test = pd.concat(test_samples_df_list, ignore_index=True)

translate_name_dict = {'fstatat':'stat','execveat':'execve','umount':'umount2','pread':'pread64','renameat2':'renameat'}
types_enumerate = {'None':0, 'ipc':1, 'kernel':2, 'fs':3, 'net':4, 'arch':5, 'mm':6, 'security':7}

df_train = healper_syscall_string(df_train)
df_test = healper_syscall_string(df_test)

df_train.drop(df_train[df_train['number_processes'] == 0].index, inplace = True)
df_test.drop(df_test[df_test['number_processes'] == 0].index, inplace = True)

df_train.to_csv('/media/cuckoohost/HD/OneDrive/AndreViana/Documents/0 USP/2023.1/TCC/Codigos/csvs/dynamic/dynamic_preprocessed.csv', index=False)
df_test.to_csv('/media/cuckoohost/HD/OneDrive/AndreViana/Documents/0 USP/2023.1/TCC/Codigos/csvs/dynamic/dynamic_preprocessed_test.csv', index=False)